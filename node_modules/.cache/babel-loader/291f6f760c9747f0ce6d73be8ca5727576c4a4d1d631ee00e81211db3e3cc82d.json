{"ast":null,"code":"var _jsxFileName = \"/Users/yunashin/src/bar-genie/src/ts/components/helperComponents/MultiSelect.tsx\",\n  _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MultiSelect = _ref => {\n  _s();\n  let {\n    buttonName,\n    onChange,\n    options,\n    selectedOptions\n  } = _ref;\n  const [showDropdown, setShowDropdown] = useState(false);\n  const toggleDropdown = () => {\n    setShowDropdown(!showDropdown);\n  };\n  const renderOption = useCallback((option, index) => {\n    const checked = selectedOptions.includes(option.value);\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      onClick: () => onChange(option.value),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: checked,\n        onChange: () => {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), option.name]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this);\n  }, [selectedOptions]);\n  const dismissHandler = event => {\n    if (event.currentTarget === event.target) {\n      setShowDropdown(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: showDropdown ? \"active\" : undefined,\n      onClick: toggleDropdown,\n      onBlur: dismissHandler,\n      children: [buttonName, showDropdown && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: showDropdown ? \"dropdown\" : \"dropdown active\",\n          children: options.map((option, index) => {\n            return renderOption(option, index);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(MultiSelect, \"ck3Yxz/cfcgXJ1uj0pv747pwMKE=\");\n_c = MultiSelect;\nexport default MultiSelect;\nvar _c;\n$RefreshReg$(_c, \"MultiSelect\");","map":{"version":3,"names":["useCallback","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","MultiSelect","_ref","_s","buttonName","onChange","options","selectedOptions","showDropdown","setShowDropdown","toggleDropdown","renderOption","option","index","checked","includes","value","onClick","children","type","fileName","_jsxFileName","lineNumber","columnNumber","name","dismissHandler","event","currentTarget","target","className","undefined","onBlur","map","_c","$RefreshReg$"],"sources":["/Users/yunashin/src/bar-genie/src/ts/components/helperComponents/MultiSelect.tsx"],"sourcesContent":["import { useCallback, useState } from \"react\";\n\ntype DropdownProps = {\n  buttonName: string;\n  onChange: Function;\n  options: {\n    name: string;\n    value: string;\n  }[];\n  selectedOptions: string[];\n}\n\nconst MultiSelect = ({ buttonName, onChange, options, selectedOptions }: DropdownProps) => {\n  const [showDropdown, setShowDropdown] = useState(false);\n  const toggleDropdown = () => {\n    setShowDropdown(!showDropdown);\n  };\n\n  const renderOption = useCallback((option: { name: string; value: string; }, index: number) => {\n    const checked = selectedOptions.includes(option.value);\n    return (\n      <p key={index} onClick={() => onChange(option.value)}>\n        <input type=\"checkbox\" checked={checked} onChange={() => { }} />\n        {option.name}\n      </p>\n    )\n  }, [selectedOptions]);\n\n  const dismissHandler = (event: React.FocusEvent<HTMLButtonElement>): void => {\n    if (event.currentTarget === event.target) {\n      setShowDropdown(false);\n    }\n  };\n\n  return (\n    <>\n      <button\n        className={showDropdown ? \"active\" : undefined}\n        onClick={toggleDropdown}\n        onBlur={dismissHandler}\n      >\n        {buttonName}\n        {showDropdown && (\n          <>\n            <div className={showDropdown ? \"dropdown\" : \"dropdown active\"}>\n              {options.map((option, index) => {\n                return renderOption(option, index);\n              })}\n            </div>\n          </>\n        )}\n      </button>\n    </>\n  )\n}\n\nexport default MultiSelect;\n"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAY9C,MAAMC,WAAW,GAAGC,IAAA,IAAuE;EAAAC,EAAA;EAAA,IAAtE;IAAEC,UAAU;IAAEC,QAAQ;IAAEC,OAAO;IAAEC;EAA+B,CAAC,GAAAL,IAAA;EACpF,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAMc,cAAc,GAAGA,CAAA,KAAM;IAC3BD,eAAe,CAAC,CAACD,YAAY,CAAC;EAChC,CAAC;EAED,MAAMG,YAAY,GAAGhB,WAAW,CAAC,CAACiB,MAAwC,EAAEC,KAAa,KAAK;IAC5F,MAAMC,OAAO,GAAGP,eAAe,CAACQ,QAAQ,CAACH,MAAM,CAACI,KAAK,CAAC;IACtD,oBACElB,OAAA;MAAemB,OAAO,EAAEA,CAAA,KAAMZ,QAAQ,CAACO,MAAM,CAACI,KAAK,CAAE;MAAAE,QAAA,gBACnDpB,OAAA;QAAOqB,IAAI,EAAC,UAAU;QAACL,OAAO,EAAEA,OAAQ;QAACT,QAAQ,EAAEA,CAAA,KAAM,CAAE;MAAE;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAC/DX,MAAM,CAACY,IAAI;IAAA,GAFNX,KAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGV,CAAC;EAER,CAAC,EAAE,CAAChB,eAAe,CAAC,CAAC;EAErB,MAAMkB,cAAc,GAAIC,KAA0C,IAAW;IAC3E,IAAIA,KAAK,CAACC,aAAa,KAAKD,KAAK,CAACE,MAAM,EAAE;MACxCnB,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,oBACEX,OAAA,CAAAE,SAAA;IAAAkB,QAAA,eACEpB,OAAA;MACE+B,SAAS,EAAErB,YAAY,GAAG,QAAQ,GAAGsB,SAAU;MAC/Cb,OAAO,EAAEP,cAAe;MACxBqB,MAAM,EAAEN,cAAe;MAAAP,QAAA,GAEtBd,UAAU,EACVI,YAAY,iBACXV,OAAA,CAAAE,SAAA;QAAAkB,QAAA,eACEpB,OAAA;UAAK+B,SAAS,EAAErB,YAAY,GAAG,UAAU,GAAG,iBAAkB;UAAAU,QAAA,EAC3DZ,OAAO,CAAC0B,GAAG,CAAC,CAACpB,MAAM,EAAEC,KAAK,KAAK;YAC9B,OAAOF,YAAY,CAACC,MAAM,EAAEC,KAAK,CAAC;UACpC,CAAC;QAAC;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC;MAAC,gBACN,CACH;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK;EAAC,gBACT,CAAC;AAEP,CAAC;AAAApB,EAAA,CA1CKF,WAAW;AAAAgC,EAAA,GAAXhC,WAAW;AA4CjB,eAAeA,WAAW;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}