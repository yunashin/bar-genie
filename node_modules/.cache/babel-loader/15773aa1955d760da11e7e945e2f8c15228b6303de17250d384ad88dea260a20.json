{"ast":null,"code":"var _jsxFileName = \"/Users/yunashin/src/bar-genie/src/ts/components/helperComponents/MultiSelect.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MultiSelect = _ref => {\n  _s();\n  let {\n    buttonName,\n    onChange,\n    options,\n    selectedOptions\n  } = _ref;\n  const [showDropdown, setShowDropdown] = useState(false);\n  const toggleDropdown = () => {\n    setShowDropdown(!showDropdown);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: showDropdown ? \"active\" : undefined,\n      onClick: toggleDropdown,\n      children: [buttonName, showDropdown && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: showDropdown ? \"dropdown\" : \"dropdown active\",\n          children: options.map((option, index) => {\n            return /*#__PURE__*/_jsxDEV(\"p\", {\n              onClick: () => onChange(option.value),\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: selectedOptions.includes(option.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 21\n              }, this), option.name]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(MultiSelect, \"/Fk0mfoaTkcfqmlHhjzD5FM1xJk=\");\n_c = MultiSelect;\nexport default MultiSelect;\nvar _c;\n$RefreshReg$(_c, \"MultiSelect\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","MultiSelect","_ref","_s","buttonName","onChange","options","selectedOptions","showDropdown","setShowDropdown","toggleDropdown","children","className","undefined","onClick","map","option","index","value","type","checked","includes","fileName","_jsxFileName","lineNumber","columnNumber","name","_c","$RefreshReg$"],"sources":["/Users/yunashin/src/bar-genie/src/ts/components/helperComponents/MultiSelect.tsx"],"sourcesContent":["import { useState } from \"react\";\n\ntype DropdownProps = {\n  buttonName: string;\n  onChange: Function;\n  options: {\n    name: string;\n    value: string;\n  }[];\n  selectedOptions: string[];\n}\n\nconst MultiSelect = ({ buttonName, onChange, options, selectedOptions }: DropdownProps) => {\n  const [showDropdown, setShowDropdown] = useState(false);\n  const toggleDropdown = () => {\n    setShowDropdown(!showDropdown);\n  };\n\n  return (\n    <>\n      <button\n        className={showDropdown ? \"active\" : undefined}\n        onClick={toggleDropdown}\n      >\n        {buttonName}\n        {showDropdown && (\n          <>\n            <div className={showDropdown ? \"dropdown\" : \"dropdown active\"}>\n              {options.map((option, index) => {\n                return (\n                  <p key={index} onClick={() => onChange(option.value)}>\n                    <input type=\"checkbox\" checked={selectedOptions.includes(option.value)} />\n                    {option.name}\n                  </p>\n                )\n              })}\n            </div>\n          </>\n        )}\n      </button>\n    </>\n  )\n}\n\nexport default MultiSelect;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAYjC,MAAMC,WAAW,GAAGC,IAAA,IAAuE;EAAAC,EAAA;EAAA,IAAtE;IAAEC,UAAU;IAAEC,QAAQ;IAAEC,OAAO;IAAEC;EAA+B,CAAC,GAAAL,IAAA;EACpF,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAMc,cAAc,GAAGA,CAAA,KAAM;IAC3BD,eAAe,CAAC,CAACD,YAAY,CAAC;EAChC,CAAC;EAED,oBACEV,OAAA,CAAAE,SAAA;IAAAW,QAAA,eACEb,OAAA;MACEc,SAAS,EAAEJ,YAAY,GAAG,QAAQ,GAAGK,SAAU;MAC/CC,OAAO,EAAEJ,cAAe;MAAAC,QAAA,GAEvBP,UAAU,EACVI,YAAY,iBACXV,OAAA,CAAAE,SAAA;QAAAW,QAAA,eACEb,OAAA;UAAKc,SAAS,EAAEJ,YAAY,GAAG,UAAU,GAAG,iBAAkB;UAAAG,QAAA,EAC3DL,OAAO,CAACS,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;YAC9B,oBACEnB,OAAA;cAAegB,OAAO,EAAEA,CAAA,KAAMT,QAAQ,CAACW,MAAM,CAACE,KAAK,CAAE;cAAAP,QAAA,gBACnDb,OAAA;gBAAOqB,IAAI,EAAC,UAAU;gBAACC,OAAO,EAAEb,eAAe,CAACc,QAAQ,CAACL,MAAM,CAACE,KAAK;cAAE;gBAAAI,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,EACzET,MAAM,CAACU,IAAI;YAAA,GAFNT,KAAK;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAGV,CAAC;UAER,CAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC;MAAC,gBACN,CACH;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK;EAAC,gBACT,CAAC;AAEP,CAAC;AAAAtB,EAAA,CA9BKF,WAAW;AAAA0B,EAAA,GAAX1B,WAAW;AAgCjB,eAAeA,WAAW;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}