{"ast":null,"code":"var _jsxFileName = \"/Users/yunashin/src/bar-genie/src/ts/components/helperComponents/MultiSelect.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MultiSelect = _ref => {\n  _s();\n  let {\n    buttonName,\n    onChange,\n    options,\n    selectedOptions\n  } = _ref;\n  const [showDropdown, setShowDropdown] = useState(false);\n  const toggleDropdown = () => {\n    setShowDropdown(!showDropdown);\n  };\n  const dismissHandler = event => {\n    if (event.currentTarget === event.target) {\n      setShowDropdown(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: showDropdown ? \"active\" : undefined,\n      onClick: toggleDropdown,\n      onBlur: e => dismissHandler(e),\n      children: buttonName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), showDropdown && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: showDropdown ? \"dropdown\" : \"dropdown active\",\n        children: options.map((option, index) => {\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            onClick: () => onChange(option.value),\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedOptions.includes(option.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 19\n            }, this), option.name]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)]\n  }, void 0, true);\n};\n_s(MultiSelect, \"/Fk0mfoaTkcfqmlHhjzD5FM1xJk=\");\n_c = MultiSelect;\nexport default MultiSelect;\nvar _c;\n$RefreshReg$(_c, \"MultiSelect\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","MultiSelect","_ref","_s","buttonName","onChange","options","selectedOptions","showDropdown","setShowDropdown","toggleDropdown","dismissHandler","event","currentTarget","target","children","className","undefined","onClick","onBlur","e","fileName","_jsxFileName","lineNumber","columnNumber","map","option","index","value","type","checked","includes","name","_c","$RefreshReg$"],"sources":["/Users/yunashin/src/bar-genie/src/ts/components/helperComponents/MultiSelect.tsx"],"sourcesContent":["import { useState } from \"react\";\n\ntype DropdownProps = {\n  buttonName: string;\n  onChange: Function;\n  options: {\n    name: string;\n    value: string;\n  }[];\n  selectedOptions: string[];\n}\n\nconst MultiSelect = ({ buttonName, onChange, options, selectedOptions }: DropdownProps) => {\n  const [showDropdown, setShowDropdown] = useState(false);\n  const toggleDropdown = () => {\n    setShowDropdown(!showDropdown);\n  };\n\n  const dismissHandler = (event: React.FocusEvent<HTMLButtonElement>) => {\n    if (event.currentTarget === event.target) {\n      setShowDropdown(false);\n    }\n  }\n\n  return (\n    <>\n      <button\n        className={showDropdown ? \"active\" : undefined}\n        onClick={toggleDropdown}\n        onBlur={(e: React.FocusEvent<HTMLButtonElement>) => dismissHandler(e)}\n      >\n        {buttonName}\n      </button>\n      {showDropdown && (\n        <>\n          <div className={showDropdown ? \"dropdown\" : \"dropdown active\"}>\n            {options.map((option, index) => {\n              return (\n                <p key={index} onClick={() => onChange(option.value)}>\n                  <input type=\"checkbox\" checked={selectedOptions.includes(option.value)} />\n                  {option.name}\n                </p>\n              )\n            })}\n          </div>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default MultiSelect;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAYjC,MAAMC,WAAW,GAAGC,IAAA,IAAuE;EAAAC,EAAA;EAAA,IAAtE;IAAEC,UAAU;IAAEC,QAAQ;IAAEC,OAAO;IAAEC;EAA+B,CAAC,GAAAL,IAAA;EACpF,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAMc,cAAc,GAAGA,CAAA,KAAM;IAC3BD,eAAe,CAAC,CAACD,YAAY,CAAC;EAChC,CAAC;EAED,MAAMG,cAAc,GAAIC,KAA0C,IAAK;IACrE,IAAIA,KAAK,CAACC,aAAa,KAAKD,KAAK,CAACE,MAAM,EAAE;MACxCL,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,oBACEX,OAAA,CAAAE,SAAA;IAAAe,QAAA,gBACEjB,OAAA;MACEkB,SAAS,EAAER,YAAY,GAAG,QAAQ,GAAGS,SAAU;MAC/CC,OAAO,EAAER,cAAe;MACxBS,MAAM,EAAGC,CAAsC,IAAKT,cAAc,CAACS,CAAC,CAAE;MAAAL,QAAA,EAErEX;IAAU;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,EACRhB,YAAY,iBACXV,OAAA,CAAAE,SAAA;MAAAe,QAAA,eACEjB,OAAA;QAAKkB,SAAS,EAAER,YAAY,GAAG,UAAU,GAAG,iBAAkB;QAAAO,QAAA,EAC3DT,OAAO,CAACmB,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;UAC9B,oBACE7B,OAAA;YAAeoB,OAAO,EAAEA,CAAA,KAAMb,QAAQ,CAACqB,MAAM,CAACE,KAAK,CAAE;YAAAb,QAAA,gBACnDjB,OAAA;cAAO+B,IAAI,EAAC,UAAU;cAACC,OAAO,EAAEvB,eAAe,CAACwB,QAAQ,CAACL,MAAM,CAACE,KAAK;YAAE;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,EACzEE,MAAM,CAACM,IAAI;UAAA,GAFNL,KAAK;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGV,CAAC;QAER,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC,gBACN,CACH;EAAA,eACD,CAAC;AAEP,CAAC;AAAArB,EAAA,CArCKF,WAAW;AAAAgC,EAAA,GAAXhC,WAAW;AAuCjB,eAAeA,WAAW;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}